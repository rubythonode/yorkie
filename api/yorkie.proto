/*
 * Copyright 2020 The Yorkie Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package api;

service Yorkie {
    rpc ActivateClient (ActivateClientRequest) returns (ActivateClientResponse) {}
    rpc DeactivateClient (DeactivateClientRequest) returns (DeactivateClientResponse) {}
    rpc AttachDocument (AttachDocumentRequest) returns (AttachDocumentResponse) {}
    rpc DetachDocument (DetachDocumentRequest) returns (DetachDocumentResponse) {}
    rpc WatchDocuments (WatchDocumentsRequest) returns (stream WatchDocumentsResponse) {}
    rpc PushPull (PushPullRequest) returns (PushPullResponse) {}
}

/////////////////////////////////////////
// Messages for RPC                    //
/////////////////////////////////////////

message RequestHeader {
    uint32 version = 1;
}

message ActivateClientRequest {
    RequestHeader header = 1;
    string client_key = 2;
}

message ActivateClientResponse {
    string client_key = 1;
    string client_id = 2;
}

message DeactivateClientRequest {
    RequestHeader header = 1;
    string client_id = 2;
}

message DeactivateClientResponse {
    string client_id = 1;
}

message AttachDocumentRequest {
    RequestHeader header = 1;
    string client_id = 2;
    ChangePack change_pack = 3;
}

message AttachDocumentResponse {
    string client_id = 1;
    ChangePack change_pack = 2;
}

message DetachDocumentRequest {
    RequestHeader header = 1;
    string client_id = 2;
    ChangePack change_pack = 3;
}

message DetachDocumentResponse {
    string client_key = 1;
    ChangePack change_pack = 2;
}

message WatchDocumentsRequest {
    RequestHeader header = 1;
    string client_id = 2;
    repeated DocumentKey document_keys = 3;
}

message WatchDocumentsResponse {
    string client_id = 1;
    repeated DocumentKey document_keys = 2;
}

message PushPullRequest {
    RequestHeader header = 1;
    string client_id = 2;
    ChangePack change_pack = 3;
}

message PushPullResponse {
    string client_id = 1;
    ChangePack change_pack = 2;
}

/////////////////////////////////////////
// Messages for Model                  //
/////////////////////////////////////////

message ChangePack {
    DocumentKey document_key = 1;
    Checkpoint checkpoint = 2;
    repeated Change changes = 3;
}

message Change {
    ChangeID id = 1;
    string message = 2;
    repeated Operation operations = 3;
}

message ChangeID {
    uint32 client_seq = 1;
    uint64 lamport = 2 [jstype = JS_STRING];
    string actor_id = 3;
}

message Operation {
    message Set {
        string key = 1;
        JSONElementSimple value = 2;
        TimeTicket parent_created_at = 3;
        TimeTicket executed_at = 4;
    }
    message Add {
        JSONElementSimple value = 1;
        TimeTicket parent_created_at = 2;
        TimeTicket prev_created_at = 3;
        TimeTicket executed_at = 4;
    }
    message Remove {
        TimeTicket parent_created_at = 1;
        TimeTicket created_at = 2;
        TimeTicket executed_at = 3;
    }
    message Edit {
        TimeTicket parent_created_at = 1;
        TextNodePos from = 2;
        TextNodePos to = 3;
        map<string, TimeTicket> created_at_map_by_actor = 4;
        string content = 5;
        TimeTicket executed_at = 6;
    }
    message Select {
        TimeTicket parent_created_at = 1;
        TextNodePos from = 2;
        TextNodePos to = 3;
        TimeTicket executed_at = 4;
    }

    oneof body {
        Set set = 1;
        Add add = 2;
        Remove remove = 3;
        Edit edit = 4;
        Select select = 5;
    }
}

message JSONElementSimple {
    TimeTicket created_at = 1;
    TimeTicket updated_at = 2;
    TimeTicket deleted_at = 3;
    ValueType type = 4;
    bytes value = 5;
}

/////////////////////////////////////////
// Messages for JSON                   //
/////////////////////////////////////////

message JSONElement {
    message JSONObject {
        repeated RHTNode nodes = 1;
        TimeTicket created_at = 2;
        TimeTicket updated_at = 3;
        TimeTicket deleted_at = 4;
    }
    message JSONArray {
        repeated RGANode nodes = 1;
        TimeTicket created_at = 2;
        TimeTicket updated_at = 3;
        TimeTicket deleted_at = 4;
    }
    message JSONPrimitive {
        ValueType type = 1;
        bytes value = 2;
        TimeTicket created_at = 3;
        TimeTicket updated_at = 4;
        TimeTicket deleted_at = 5;
    }

    oneof Body {
        JSONObject json_object = 1;
        JSONArray json_array = 2;
    }
}

message RHTNode {
    string key = 1;
    JSONElement element = 2;
}

message RGANode {
    RGANode next = 1;
    JSONElement element = 2;
}

/////////////////////////////////////////
// Messages for Common                 //
/////////////////////////////////////////

message DocumentKey {
    string collection = 1;
    string document = 2;
}

message Checkpoint {
    uint64 server_seq = 1 [jstype = JS_STRING];
    uint32 client_seq = 2;
}

message TextNodePos {
    TimeTicket created_at = 1;
    int32 offset = 2;
    int32 relative_offset = 3;
}

message TimeTicket {
    uint64 lamport = 1 [jstype = JS_STRING];
    uint32 delimiter = 2;
    string actor_id = 3;
}

enum ValueType {
    NULL = 0;
    BOOLEAN = 1;
    INTEGER = 2;
    LONG = 3;
    DOUBLE = 4;
    STRING = 5;
    BYTES = 6;
    DATE = 7;
    JSON_OBJECT = 8;
    JSON_ARRAY = 9;
    TEXT = 10;
}
